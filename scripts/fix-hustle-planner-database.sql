-- ========================================\n-- COMPREHENSIVE DATABASE SCHEMA FIX FOR HUSTLE PLANNER\n-- ========================================\n-- \n-- This script ensures all required columns exist and RLS permissions are correct\n-- Run this in your Supabase SQL Editor\n--\n\nBEGIN;\n\n-- 1. Add all missing columns to tasks table\nALTER TABLE public.tasks ADD COLUMN IF NOT EXISTS status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'completed', 'skipped'));\nALTER TABLE public.tasks ADD COLUMN IF NOT EXISTS type TEXT CHECK (type IN ('streak', 'today'));\nALTER TABLE public.tasks ADD COLUMN IF NOT EXISTS task_date DATE;\nALTER TABLE public.tasks ADD COLUMN IF NOT EXISTS due_at TIMESTAMPTZ;\nALTER TABLE public.tasks ADD COLUMN IF NOT EXISTS load_score INTEGER DEFAULT 1 CHECK (load_score BETWEEN 1 AND 5);\nALTER TABLE public.tasks ADD COLUMN IF NOT EXISTS proof_mode TEXT DEFAULT 'flex' CHECK (proof_mode IN ('flex', 'realtime'));\nALTER TABLE public.tasks ADD COLUMN IF NOT EXISTS completed BOOLEAN DEFAULT FALSE;\nALTER TABLE public.tasks ADD COLUMN IF NOT EXISTS completed_at TIMESTAMPTZ;\nALTER TABLE public.tasks ADD COLUMN IF NOT EXISTS scheduled_for_date DATE;\nALTER TABLE public.tasks ADD COLUMN IF NOT EXISTS xp_value INTEGER DEFAULT 10;\nALTER TABLE public.tasks ADD COLUMN IF NOT EXISTS is_habit BOOLEAN DEFAULT FALSE;\nALTER TABLE public.tasks ADD COLUMN IF NOT EXISTS priority TEXT DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high'));\n\n-- 2. Ensure goals table has required columns\nALTER TABLE public.goals ADD COLUMN IF NOT EXISTS status TEXT DEFAULT 'active';\nALTER TABLE public.goals ADD COLUMN IF NOT EXISTS category TEXT;\nALTER TABLE public.goals ADD COLUMN IF NOT EXISTS target_value INTEGER DEFAULT 100;\nALTER TABLE public.goals ADD COLUMN IF NOT EXISTS unit TEXT DEFAULT '';\nALTER TABLE public.goals ADD COLUMN IF NOT EXISTS color TEXT;\nALTER TABLE public.goals ADD COLUMN IF NOT EXISTS cover_image TEXT;\nALTER TABLE public.goals ADD COLUMN IF NOT EXISTS priority TEXT DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high'));\n\n-- 3. Ensure profiles table has required columns\nALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS full_name TEXT;\nALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS experience_level TEXT DEFAULT 'beginner';\nALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS level INTEGER DEFAULT 1;\nALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS xp INTEGER DEFAULT 0;\nALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS streak_days INTEGER DEFAULT 0;\nALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS longest_streak INTEGER DEFAULT 0;\n\n-- 4. Drop existing constraint if it exists and recreate it\nDO $$ \nBEGIN\n    -- Drop existing constraint if it exists\n    IF EXISTS (\n        SELECT 1 FROM pg_constraint \n        WHERE conname = 'tasks_type_shape' \n        AND conrelid = 'public.tasks'::regclass\n    ) THEN\n        ALTER TABLE public.tasks DROP CONSTRAINT tasks_type_shape;\n    END IF;\n    \n    -- Add the constraint\n    ALTER TABLE public.tasks ADD CONSTRAINT tasks_type_shape CHECK (\n        (type = 'streak' AND task_date IS NOT NULL AND due_at IS NULL) OR\n        (type = 'today' AND task_date IS NULL AND due_at IS NOT NULL) OR\n        (type IS NULL)\n    );\nEND $$;\n\n-- 5. Create indexes for better performance\nCREATE INDEX IF NOT EXISTS idx_tasks_status ON public.tasks(status);\nCREATE INDEX IF NOT EXISTS idx_tasks_type ON public.tasks(type);\nCREATE INDEX IF NOT EXISTS idx_tasks_user_status ON public.tasks(user_id, status);\nCREATE INDEX IF NOT EXISTS idx_tasks_goal_type_date ON public.tasks(goal_id, type, task_date);\nCREATE INDEX IF NOT EXISTS idx_tasks_goal_due ON public.tasks(goal_id, due_at);\nCREATE INDEX IF NOT EXISTS idx_tasks_user_date ON public.tasks(user_id, task_date);\nCREATE INDEX IF NOT EXISTS idx_tasks_user_due ON public.tasks(user_id, due_at);\nCREATE INDEX IF NOT EXISTS idx_tasks_scheduled_date ON public.tasks(scheduled_for_date);\n\n-- 6. Enable RLS on all tables\nALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.goals ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.tasks ENABLE ROW LEVEL SECURITY;\n\n-- 7. Drop and recreate RLS policies for tasks table\nDROP POLICY IF EXISTS \"Users can view own tasks\" ON public.tasks;\nCREATE POLICY \"Users can view own tasks\" ON public.tasks\n    FOR SELECT USING (auth.uid() = user_id);\n\nDROP POLICY IF EXISTS \"Users can insert own tasks\" ON public.tasks;\nCREATE POLICY \"Users can insert own tasks\" ON public.tasks\n    FOR INSERT WITH CHECK (auth.uid() = user_id);\n\nDROP POLICY IF EXISTS \"Users can update own tasks\" ON public.tasks;\nCREATE POLICY \"Users can update own tasks\" ON public.tasks\n    FOR UPDATE USING (auth.uid() = user_id);\n\nDROP POLICY IF EXISTS \"Users can delete own tasks\" ON public.tasks;\nCREATE POLICY \"Users can delete own tasks\" ON public.tasks\n    FOR DELETE USING (auth.uid() = user_id);\n\n-- 8. Drop and recreate RLS policies for goals table\nDROP POLICY IF EXISTS \"Users can view own goals\" ON public.goals;\nCREATE POLICY \"Users can view own goals\" ON public.goals\n    FOR SELECT USING (auth.uid() = user_id);\n\nDROP POLICY IF EXISTS \"Users can insert own goals\" ON public.goals;\nCREATE POLICY \"Users can insert own goals\" ON public.goals\n    FOR INSERT WITH CHECK (auth.uid() = user_id);\n\nDROP POLICY IF EXISTS \"Users can update own goals\" ON public.goals;\nCREATE POLICY \"Users can update own goals\" ON public.goals\n    FOR UPDATE USING (auth.uid() = user_id);\n\nDROP POLICY IF EXISTS \"Users can delete own goals\" ON public.goals;\nCREATE POLICY \"Users can delete own goals\" ON public.goals\n    FOR DELETE USING (auth.uid() = user_id);\n\n-- 9. Drop and recreate RLS policies for profiles table\nDROP POLICY IF EXISTS \"Users can view own profile\" ON public.profiles;\nCREATE POLICY \"Users can view own profile\" ON public.profiles\n    FOR SELECT USING (auth.uid() = id);\n\nDROP POLICY IF EXISTS \"Users can update own profile\" ON public.profiles;\nCREATE POLICY \"Users can update own profile\" ON public.profiles\n    FOR UPDATE USING (auth.uid() = id);\n\nDROP POLICY IF EXISTS \"Users can insert own profile\" ON public.profiles;\nCREATE POLICY \"Users can insert own profile\" ON public.profiles\n    FOR INSERT WITH CHECK (auth.uid() = id);\n\n-- 10. Create function to ensure user profile exists\nCREATE OR REPLACE FUNCTION public.ensure_user_profile()\nRETURNS TRIGGER AS $$\nBEGIN\n    INSERT INTO public.profiles (id, full_name, level, xp, streak_days, longest_streak, experience_level)\n    VALUES (\n        NEW.id,\n        COALESCE(NEW.raw_user_meta_data->>'name', NEW.email, 'User'),\n        1,\n        0,\n        0,\n        0,\n        'beginner'\n    )\n    ON CONFLICT (id) DO NOTHING;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- 11. Create trigger to automatically create profile on user signup\nDROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;\nCREATE TRIGGER on_auth_user_created\n    AFTER INSERT ON auth.users\n    FOR EACH ROW EXECUTE FUNCTION public.ensure_user_profile();\n\n-- 12. Grant necessary permissions to service role\nGRANT ALL ON public.tasks TO service_role;\nGRANT ALL ON public.goals TO service_role;\nGRANT ALL ON public.profiles TO service_role;\n\n-- 13. Grant necessary permissions to authenticated users\nGRANT SELECT, INSERT, UPDATE, DELETE ON public.tasks TO authenticated;\nGRANT SELECT, INSERT, UPDATE, DELETE ON public.goals TO authenticated;\nGRANT SELECT, INSERT, UPDATE ON public.profiles TO authenticated;\n\nCOMMIT;\n\n-- Verify the fix\nSELECT 'Database schema fix completed successfully' AS status;\n\n-- Show all columns in tasks table to verify\nSELECT column_name, data_type, is_nullable, column_default \nFROM information_schema.columns \nWHERE table_schema = 'public' \nAND table_name = 'tasks' \nORDER BY ordinal_position;